/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pepperspalace;

import pepperspalace.animals.Ocelot;
import pepperspalace.parents.Animal;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        Ocelot pepper = new Ocelot("Pepper", 4, 2, "black");
        pepper.makeNoise();
        pepper.pounce();
        System.out.println(pepper.toString());
        pepper.makeNoise("you should come to my palace");

        //  doesn't work if Animal is an abstract class
        // Animal something = new Animal("some", 4, 5);

      Animal fakeOcelot = new Ocelot();
      // debugger knows fakeOcelot comes from an Ocelot object
      // but cannot access Ocelot's class methods because fakeOcelot is still only an Animal
      // line below will fail
      // fakeOcelot.pounce();

      // lines below work because we have casted the Animal to an Ocelot
      Ocelot realOcelot = (Ocelot)fakeOcelot;
      realOcelot.pounce();

      Ocelot indi = new Ocelot();
      Animal animal = (Animal)indi;
      Ocelot ocelot = (Ocelot)animal;

      // All use Ocelot's values and can access Ocelot's methods because they were originate from Ocelot
      // BUT animal cannot run .pounce() without explicitly being casted to an Ocelot
      System.out.println("indi says: ");
      indi.makeNoise();
      System.out.println("animal says: " );
      animal.makeNoise();
      System.out.println("ocelot says: " );
      ocelot.makeNoise();

      // line below crashes
      // animal.pounce();
      // line below works because we cast in place
      ((Ocelot) animal).pounce();

      Animal newAnimal = new Animal("name", 4, 4);
      // uncommenting line below will cause
      // Ocelot newOcelot = (Ocelot)newAnimal;
    }
}
